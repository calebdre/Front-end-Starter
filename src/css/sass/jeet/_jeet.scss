@import 'compass';
@import 'typography';

//  Syntax quick reference
//  ----------------------
//  gutter[g] = 1
//  center(max_width = 1410px, padding = 15px)
//  column[col](ratios = 1, offset = false)
//  span(ratio = 1, offset = false)
//  shift(ratios = 0)
//  unshift()
//  bp(w = 705px, mobile_first = false[mf])
//  endbp()
//  stack(padding = 0, align = center[c, left, l, right, r])
//  edit()
//  align(direction = both[b, vertical, v, horizontal, h])
//  hamburger(bg = #222, style = normal[flat], align = right[left], top = 0, radius = 3px, menu = white[black], bp = 705px)
//  cf()

// Settings
$gutter : 3;
$parent_first : false;
$layout_direction : LTR;
$img-path : '../img/';

// Mixins
@mixin center($max_width: 1410px, $padding: 15px){
    @include cf;
    width: auto;
    max-width: $max_width;
    float: none;
    display: block;
    margin-right: auto;
    margin-left: auto;
    padding-left: $padding;
    padding-right: $padding;
}

@mixin column($ratios: 1, $offset: false, $cycle: 0, $uncycle: 0){
    $side: get_layout_direction();
    $widths: get_column($ratios);
    $margin_l: 0;
    $margin_last: 0;
    $margin_r: nth($widths, 2);
    @if $offset != false {
        @if $offset < 0 {
            $offset: $offset * -1;
            $offset: nth(get_column($offset, nth($widths, 2)), 1);
            $margin_r: $offset + nth($widths, 2) * 2;
            $margin_last: $margin_r;
        }
        @else {
            $offset: nth(get_column($offset, nth($widths, 2)), 1);
            $margin_l: $offset + nth($widths, 2);
        }
    }
    @include cf;
    float: $side;
    width: nth($widths, 1) + unquote("%");
    margin-#{$side}: $margin_l + unquote("%");
    margin-#{opposite-position($side)}: $margin_r + unquote("%");
    @if $uncycle != 0 {
        &:nth-child(#{$uncycle}n) {
            margin-#{opposite-position($side)}: $margin_r + unquote("%");
            float: $side;
        }
    }
    @if $cycle != 0 {
        &:nth-child(#{$cycle}n) {
            margin-#{opposite-position($side)}: $margin_last + unquote("%");
            float: opposite-position($side);
        }
    }
    @else {
        &:last-child {
            margin-#{opposite-position($side)}: $margin_last + unquote("%");
        }
    }
}
@mixin span($ratio: 1, $offset: false) {
    $side: get_layout_direction();
    $width: get_span($ratio);
    $margin_l: 0;
    $margin_r: $margin_l;
    @if $offset != false {
        @if $offset < 0 {
            $offset: $offset * -1;
            $margin_r: get_span($offset);
        }
        @else {
            $margin_l: get_span($offset);
        }
    }
    @include cf;
    float: $side;
    width: $width + unquote("%");
    margin-#{$side}: $margin_l + unquote("%");
    margin-#{opposite-position($side)}: $margin_r + unquote("%");
}

@mixin shift($ratios: 0, $col_or_span: column) {
    $side: get_layout_direction();
    @if $side == right {
        $ratios: replace_nth($ratios, 0, nth($ratios, 1) * -1);
    }
    @if $col_or_span == column or $col_or_span == col or $col_or_span == c {
        $widths: get_column($ratios);
        $translate: nth($widths, 1) + nth($widths, 2);
        left: $translate + unquote("%");
    }
    @else {
        $translate: get_span($ratios);
        left: $translate + unquote("%");
    }
    position: relative;
}

@mixin unshift() {
    position: static;
    left: 0;
}

@mixin bp($w: 705px, $mobile_first: false) {
    @if $mobile_first == mf or $mobile_first == true {
        @media all and (min-width: $w){@content};
    }
    @else {
        @media all and (max-width: $w){@content};
    }
}

@mixin stack($padding: 0, $align: center) {
    $side: get_layout_direction();
    display: block;
    float: none;
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    @if $padding != 0 {
        padding-left: $padding;
        padding-right: $padding;
    }
    &:first-child {
        margin-#{$side}: auto;
    }
    &:last-child {
        margin-#{opposite-position($side)}: auto;
    }
    @if $align == left or $align == l{
        text-align: left;
    } @else if $align == right or $align == r {
        text-align: right;
    } @else {
        text-align: center;
    }
}
@mixin edit() {
    * {
        background: rgba(#000, 5%) url(../img/edit_mixin.png);
    }
}

// Grid utilities
@function get_span($ratio: 1) {
    @return $ratio * 100;
}

@function get_column($ratios: 1, $g: $gutter) {
    @if $parent_first != true { $ratios: reverse($ratios); }
    $w: 100;
    @each $ratio in $ratios {
        $g: $g / $w * 100;
        $w: 100 * $ratio - $g + $ratio * $g;
    }
    @return $w $g;
}

@function get_layout_direction() {
    $result: if($layout_direction == RTL, right, left);
    @return $result;
}


// TODO
@function replace_nth($list, $index, $value) {
    $result: ();
    //$index: length(list) + index if index < 0;
    @if $index < 0 {
        $index: length($list) + $index;
    }
    @else {
        $index: lenght($list);
    }
    @for $i from 1 through (length($list) - 1) {
        @if $i == $index {
            $result: append($value);
        }
        @else {
            $result: append($list, $i);
        }
    }
    @return $result;
}

@function reverse($list) {
    $result: ();
    @for $i from length($list)*-1 through -1 {
        $result: append($result, nth($list, abs($i)));
    }
    @return $result;
}

// Function aliases
$g: $gutter;
// $cf: $clearfix;
@mixin col($args...) {
    @include column($args...)
}
@mixin clearfix($args...) {
    @include cf;
}

// Placeholders
@mixin cf{
    @include pie-clearfix;
}

// Resets and defaults
// @include global-reset();
// @include base();
*, *:before, *:after, *::before, *::after {
    @include box-sizing(border-box);
    *behavior: url(js/vendor/boxsizing.htc);
    margin: 0;
    padding: 0;
}
html {
    overflow-y: scroll;
    overflow-x: hidden;
}
body {
    @include cf;
    width: 100%;
}
img, video, audio, embed, object, input, iframe {
    max-width: 100%;
}
.cf {
    @include cf;
}
.chromeframe {
    width: 100%;
    background: #fff;
    background: linear-gradient(top, #fff, #eee);
    border-bottom: 1px solid #ddd;
    box-shadow: inset 0 -1px 0 #fff;
    text-shadow: 0 1px 0 #fff;
    p {
        @include center();
        padding: 15px 0;
        margin-top: 0;
        margin-bottom: 0;
        text-align: center;
        margin-bottom: 0;
        a {
            color: #3a95fb;
        }
    }
}

@import 'typography';